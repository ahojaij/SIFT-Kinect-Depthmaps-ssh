#include "KinectWrapper.h"
#include "KinectSensor.h"
#include <iostream>
#include <fstream>


KinectWrapper::KinectWrapper()
{
	sensor = new KinectSensor;
	hr = sensor->initialize(RES_640_480);
}

unsigned int* KinectWrapper::GetImage_color()
{
	if(hr)
	{
			std::cout<<"Failed to initialize Kinect "<<std::endl;
			return 0;
	}

	USHORT * depth = new USHORT[640*480];
	unsigned int * color = new unsigned int[640*480];


	sensor->grab(depth, color);

	//save the color image
//	std::ofstream imOut("image.ppm", std::ios::out);
//	imOut<<"P3"<<std::endl;
//	imOut<<"#ppm file generated by filter program"<<std::endl;
//	imOut<<640<<" "<<480<<std::endl;
//	imOut<<"255"<<std::endl;
//	int i,j;
//	for(i=0; i<480; ++i)
//	{
//		for(j=0; j<640; ++j)
//		{
//			RGBQUAD * quad = (RGBQUAD *)(color + i*640+j);
//			imOut<<" "<<(int)quad->rgbRed<<" "<<(int)quad->rgbGreen<<" "<<(int)quad->rgbBlue<<" ";
//		}
//		imOut<<std::endl;
//	}
//	imOut.close();

	std::cout<<"All Done ";
	return color;

}

USHORT* KinectWrapper::GetImage_depth()
{
	if(hr)
	{
		std::cout<<"Failed to initialize Kinect "<<std::endl;
		return 0;
	}

	USHORT * depth = new USHORT[640*480];
	unsigned int * color = new unsigned int[640*480];

	for (int i = 0; i<480; i++)
	{
		for (int j = 0; j<640; j++)
		{
//			depth[i*480+j] = 1;
//			std::cout<<(int)depth[i*480+j]<<std::endl;
		}
	}

	sensor->grab(depth, color);

//	std::ofstream output_depth("output_depth_ref.txt");
	for (int i = 0; i<480; i++)
	{
		for (int j = 0; j<640; j++)
		{
//			output_depth<<depth[i*480+j]<<std::endl;
//			std::cout<<(int)depth[i*480+j]<<std::endl;
//			std::cout<<color[i*480+j]<<std::endl;
		}
	}
//	std::cout<<"Done Saving ";

	return depth;

}