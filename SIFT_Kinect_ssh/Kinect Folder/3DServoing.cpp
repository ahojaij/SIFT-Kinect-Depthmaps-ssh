#include "3DServoing.h"
#include  <iostream>
#include <fstream>
//#include <windows.h> //For the Sleep() command
#include <Eigen/LU>
#include <Eigen/Core>

#include "InteractionMatrix.h"



threeDServoing::threeDServoing()
{
	hr = sensor.initialize(RES_640_480);
}

unsigned int* threeDServoing::GetImage_color()
{
	if(hr)
	{
			std::cout<<"Failed to initialize Kinect "<<std::endl;
			return 0;
	}

	USHORT * depth = new USHORT[640*480];
	unsigned int * color = new unsigned int[640*480];


	sensor.grab(depth, color);

	//save the color image
//	std::ofstream imOut("image.ppm", std::ios::out);
//	imOut<<"P3"<<std::endl;
//	imOut<<"#ppm file generated by filter program"<<std::endl;
//	imOut<<640<<" "<<480<<std::endl;
//	imOut<<"255"<<std::endl;
//	int i,j;
//	for(i=0; i<480; ++i)
//	{
//		for(j=0; j<640; ++j)
//		{
//			RGBQUAD * quad = (RGBQUAD *)(color + i*640+j);
//			imOut<<" "<<(int)quad->rgbRed<<" "<<(int)quad->rgbGreen<<" "<<(int)quad->rgbBlue<<" ";
//		}
//		imOut<<std::endl;
//	}
//	imOut.close();

	std::cout<<"All Done ";
	return color;

}

USHORT* threeDServoing::GetImage_depth()
{
	if(hr)
	{
		std::cout<<"Failed to initialize Kinect "<<std::endl;
		return 0;
	}

	USHORT * depth = new USHORT[640*480];
	unsigned int * color = new unsigned int[640*480];

	sensor.grab(depth, color);

	return depth;

}
